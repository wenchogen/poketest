// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TokenSwap is Ownable {
    IERC20 public rareCoin;
    uint256 public constant exchangeRate = 100000; // 固定汇率：1 ETH = 100000 RareCoin

    constructor(IERC20 _rareCoin) Ownable(msg.sender) {
        rareCoin = _rareCoin;
    }

    // 玩家用ETH兑换RareCoin
    function swapETHForRareCoin() external payable {
        uint256 ethAmount = msg.value;
        uint256 amountToReceive = ethAmount * exchangeRate / 1 ether; // 处理ETH的小数部分

        // 确保玩家发送的ETH足够兑换至少1个RareCoin
        require(amountToReceive >= 1, "Insufficient ETH to exchange for at least 1 RareCoin");

        require(rareCoin.balanceOf(address(this)) >= amountToReceive, "Not enough RareCoin in the contract");
        rareCoin.transfer(msg.sender, amountToReceive);
    }

    // 玩家用RareCoin兑换ETH
    function swapRareCoinForETH(uint256 rareCoinAmount) external {
        uint256 ethAmount = rareCoinAmount * 1 ether / exchangeRate; // 处理ETH的小数部分

        require(address(this).balance >= ethAmount, "Not enough ETH in the contract");
        rareCoin.transferFrom(msg.sender, address(this), rareCoinAmount);
        payable(msg.sender).transfer(ethAmount);
    }

    // 合约所有者提取多余的ETH
    function withdrawETH(uint256 amount) external onlyOwner {
        require(address(this).balance >= amount, "Not enough ETH in the contract");
        payable(owner()).transfer(amount);
    }

    // 合约所有者提取多余的RareCoin
    function withdrawRareCoins(uint256 amount) external onlyOwner {
        require(rareCoin.balanceOf(address(this)) >= amount, "Not enough RareCoin in the contract");
        rareCoin.transfer(owner(), amount);
    }

    // 获取当前合约中剩余的RareCoin数量
    function getRemainingRareCoin() external view returns (uint256) {
        return rareCoin.balanceOf(address(this));
    }

    // 获取当前合约中剩余的ETH数量
    function getRemainingETH() external view returns (uint256) {
        return address(this).balance;
    }

    // 获取当前的汇率
    function getCurrentExchangeRate() external pure returns (uint256) {
        return exchangeRate;
    }
}
